@{
    ViewData["Title"] = "Ch·ªçn v·ªã tr√≠ c·ª≠a h√†ng";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>üó∫Ô∏è B·∫£n ƒë·ªì ch·ªçn v·ªã tr√≠ c·ª≠a h√†ng (Leaflet + OpenRouteService)</h2>

<button onclick="getCurrentLocation()">üìç L·∫•y v·ªã tr√≠ hi·ªán t·∫°i</button>
<br /><br />

<input type="text" id="storeLocation" placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ª≠a h√†ng..." style="width: 300px;" />
<button onclick="geocodeAddress()">üîç T√¨m & V·∫Ω ƒë∆∞·ªùng</button>

<div id="routeInfo" style="margin-top: 10px; font-weight: bold;"></div>

<style>
    #map {
        height: 500px;
        width: 100%;
        border: 2px solid #ccc;
        border-radius: 8px;
        margin-top: 20px;
    }
    button {
        margin-right: 10px;
        padding: 8px 16px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    button:hover {
        background-color: #218838;
    }
</style>

<div id="map"></div>

<!-- Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
    let map, marker, currentLocation, routeLine, deliveryZone;
    const apiKey = "eyJvcmciOiI1YjNjZTM1OTc4NTExMTAwMDFjZjYyNDgiLCJpZCI6ImYxZDJjYTMzYmJhNjQ5NGI5MDY0ZjVhOTE3ZjcyZWE2IiwiaCI6Im11cm11cjY0In0=";

    const defaultLocation = [10.762622, 106.660172]; // TP.HCM

    map = L.map('map').setView(defaultLocation, 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap'
    }).addTo(map);

    marker = L.marker(defaultLocation, { draggable: true }).addTo(map)
        .bindPopup("üìå V·ªã tr√≠ c·ª≠a h√†ng").openPopup();

    marker.on('dragend', function (e) {
        const pos = marker.getLatLng();
        alert(`üìå V·ªã tr√≠ ƒë√£ ch·ªçn:\nLat: ${pos.lat}\nLng: ${pos.lng}`);
    });

    function getCurrentLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                currentLocation = [position.coords.latitude, position.coords.longitude];
                map.setView(currentLocation, 15);
                L.marker(currentLocation).addTo(map).bindPopup("üìç V·ªã tr√≠ hi·ªán t·∫°i").openPopup();
            }, function () {
                alert("‚ùå Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ hi·ªán t·∫°i.");
            });
        } else {
            alert("‚ö†Ô∏è Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Geolocation.");
        }
    }

    function geocodeAddress() {
        const address = document.getElementById("storeLocation").value;
        if (!currentLocation) {
            alert("‚ö†Ô∏è Vui l√≤ng l·∫•y v·ªã tr√≠ hi·ªán t·∫°i tr∆∞·ªõc.");
            return;
        }

        fetch(`https://api.openrouteservice.org/geocode/search?api_key=${apiKey}&text=${encodeURIComponent(address)}`)
            .then(res => res.json())
            .then(data => {
                if (data.features.length > 0) {
                    const coords = data.features[0].geometry.coordinates;
                    const storeLocation = [coords[1], coords[0]];
                    map.setView(storeLocation, 15);
                    marker.setLatLng(storeLocation);

                    drawRoute(currentLocation, storeLocation);
                } else {
                    alert("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ.");
                }
            })
            .catch(err => {
                alert("‚ö†Ô∏è L·ªói khi g·ªçi API: " + err);
            });
    }

    function drawRoute(start, end) {
        const body = {
            coordinates: [
                [start[1], start[0]], // [lng, lat]
                [end[1], end[0]]
            ]
        };

        fetch("https://api.openrouteservice.org/v2/directions/driving-car", {
            method: "POST",
            headers: {
                "Authorization": apiKey,
                "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
        })
        .then(res => res.json())
        .then(data => {
            const coords = data.features[0].geometry.coordinates.map(c => [c[1], c[0]]); // [lat, lng]

            if (routeLine) {
                map.removeLayer(routeLine);
            }

            routeLine = L.polyline(coords, { color: 'blue', weight: 5 }).addTo(map);
            map.fitBounds(routeLine.getBounds());

            // Hi·ªÉn th·ªã th√¥ng tin tuy·∫øn ƒë∆∞·ªùng
            const distance = data.features[0].properties.summary.distance / 1000; // km
            const duration = data.features[0].properties.summary.duration / 60; // ph√∫t

            document.getElementById("routeInfo").innerText =
                `üöó Qu√£ng ƒë∆∞·ªùng: ${distance.toFixed(2)} km | ‚è±Ô∏è Th·ªùi gian: ${duration.toFixed(1)} ph√∫t`;

            // V·∫Ω v√πng giao h√†ng
            drawDeliveryZone(end);
        })
        .catch(err => {
            alert("‚ùå L·ªói khi v·∫Ω tuy·∫øn ƒë∆∞·ªùng: " + err);
        });
    }

    function drawDeliveryZone(center) {
        const body = {
            locations: [[center[1], center[0]]], // [lng, lat]
            range: [900], // 15 ph√∫t = 900 gi√¢y
            units: "m"
        };

        fetch("https://api.openrouteservice.org/v2/isochrones", {
            method: "POST",
            headers: {
                "Authorization": apiKey,
                "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
        })
        .then(res => res.json())
        .then(data => {
            const polygon = data.features[0].geometry.coordinates[0].map(c => [c[1], c[0]]); // [lat, lng]

            if (deliveryZone) {
                map.removeLayer(deliveryZone);
            }

            deliveryZone = L.polygon(polygon, {
                color: 'green',
                fillColor: '#90ee90',
                fillOpacity: 0.4
            }).addTo(map).bindPopup("üì¶ V√πng giao h√†ng trong 15 ph√∫t").openPopup();
        })
        .catch(err => {
            alert("‚ùå L·ªói khi v·∫Ω v√πng giao h√†ng: " + err);
        });
    }
</script>
